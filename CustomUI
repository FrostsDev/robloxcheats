-- FrostUI.lua - Refactored for Cleanliness and Visual Polish
-- Single-file, executor-friendly custom UI lib

local FrostUI = {}
FrostUI.__index = FrostUI

-- Services
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

--[[
IMPROVEMENT: Centralized Configuration
- All styling and layout values are in one place.
- Easily tweak the entire UI's appearance without hunting through the code.
]]
local Config = {
	Fonts = {
		Default = Enum.Font.Gotham,
		Bold = Enum.Font.GothamBold,
		Code = Enum.Font.Code,
	},
	Padding = {
		Window = UDim.new(0, 12),
		Section = UDim.new(0, 8),
		Tab = UDim.new(0, 8),
	},
	Radii = {
		Window = UDim.new(0, 8),
		Section = UDim.new(0, 6),
		Button = UDim.new(0, 5),
		Input = UDim.new(0, 5),
	},
	Durations = {
		TabChange = 0.2,
		Hover = 0.15,
		Toggle = 0.2,
	}
}

-- Theme Palette
local Themes = {
	Dark = {
		Window = Color3.fromRGB(28, 28, 30),
		Accent = Color3.fromRGB(40, 40, 45), -- For sidebars, sections
		Input = Color3.fromRGB(20, 20, 22),   -- For textboxes, code blocks
		Text = Color3.fromRGB(230, 230, 230),
		Muted = Color3.fromRGB(160, 160, 165),
		Primary = Color3.fromRGB(80, 100, 255),
		Border = Color3.fromRGB(60, 60, 65),
	},
	Light = {
		Window = Color3.fromRGB(242, 242, 247),
		Accent = Color3.fromRGB(229, 229, 234),
		Input = Color3.fromRGB(255, 255, 255),
		Text = Color3.fromRGB(28, 28, 30),
		Muted = Color3.fromRGB(90, 90, 95),
		Primary = Color3.fromRGB(0, 122, 255),
		Border = Color3.fromRGB(200, 200, 205),
	}
}

-- Utility function for creating instances
local function new(class, props)
	local inst = Instance.new(class)
	for k, v in pairs(props or {}) do
		inst[k] = v
	end
	return inst
end

-- Adds hover effects to a button-like object
local function addHoverEffect(obj, baseColor, hoverColor)
	obj.MouseEnter:Connect(function()
		TweenService:Create(obj, TweenInfo.new(Config.Durations.Hover), {BackgroundColor3 = hoverColor}):Play()
	end)
	obj.MouseLeave:Connect(function()
		TweenService:Create(obj, TweenInfo.new(Config.Durations.Hover), {BackgroundColor3 = baseColor}):Play()
	end)
end

-- The main window creation function
function FrostUI:CreateWindow(title, opts)
	opts = opts or {}
	local self = setmetatable({}, FrostUI)

	-- State
	self._tabs = {}
	self._activeTab = nil
	self._themeName = opts.Theme or "Dark"
	self._theme = Themes[self._themeName]

	-- Themed elements registry
	self._themedElements = {}

	-- Create base GUI
	self._screen = new("ScreenGui", {IgnoreGuiInset = true, ResetOnSpawn = false, ZIndexBehavior = Enum.ZIndexBehavior.Sibling, Parent = LocalPlayer:WaitForChild("PlayerGui")})
	self._root = new("Frame", {
		Name = "FrostWindow",
		Size = UDim2.new(0, 760, 0, 420),
		Position = UDim2.new(0.5, -380, 0.5, -210),
		AnchorPoint = Vector2.new(0.5, 0.5),
		BorderSizePixel = 0,
		Parent = self._screen,
	})
	new("UICorner", {CornerRadius = Config.Radii.Window, Parent = self._root})
	
	-- Shadow (unchanged)
	new("ImageLabel", { Name = "Shadow", BackgroundTransparency = 1, Size = UDim2.new(1, 24, 1, 24), Position = UDim2.new(0, -12, 0, -12), Image = "rbxassetid://1316045217", ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(10,10,118,118), ImageColor3 = Color3.fromRGB(0,0,0), ImageTransparency = 0.85, Parent = self._root, ZIndex = 0 })

	-- Title Bar
	local titlebar = new("Frame", { Name = "Titlebar", Size = UDim2.new(1, 0, 0, 40), BackgroundTransparency = 1, Parent = self._root })
	self._titleLabel = new("TextLabel", { Name = "TitleLabel", Size = UDim2.new(0, 450, 1, 0), Position = UDim2.new(0, 12, 0, 0), BackgroundTransparency = 1, Text = title or "Frost UI", TextXAlignment = Enum.TextXAlignment.Left, Font = Config.Fonts.Bold, TextSize = 16, Parent = titlebar })

	-- Close Button
	local closeBtn = new("TextButton", { Name = "Close", Size = UDim2.new(0, 28, 0, 28), Position = UDim2.new(1, -40, 0.5, -14), Font = Config.Fonts.Default, Text = "âœ•", TextSize = 14, TextColor3 = Color3.fromRGB(255, 255, 255), BorderSizePixel = 0, Parent = titlebar })
	new("UICorner", {CornerRadius = Config.Radii.Button, Parent = closeBtn})
	table.insert(self._themedElements, { obj = closeBtn, prop = "BackgroundColor3", value = function(theme) return Color3.fromRGB(230, 60, 60) end })
	closeBtn.MouseEnter:Connect(function() TweenService:Create(closeBtn, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(255, 80, 80)}):Play() end)
	closeBtn.MouseLeave:Connect(function() TweenService:Create(closeBtn, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(230, 60, 60)}):Play() end)
	closeBtn.MouseButton1Click:Connect(function() self._screen:Destroy() end)

	-- Sidebar
	self._sidebar = new("Frame", { Name = "Sidebar", Size = UDim2.new(0, 170, 1, -40), Position = UDim2.new(0, 0, 0, 40), BorderSizePixel = 0, Parent = self._root })
	local tabList = new("UIListLayout", { Parent = self._sidebar, Padding = Config.Padding.Tab, SortOrder = Enum.SortOrder.LayoutOrder })

	--[[
	IMPROVEMENT: Visual Polish
	- An animated indicator bar smoothly tweens between selected tabs.
	- This provides a much cleaner and more modern feel than just changing text color.
	]]
	self._tabIndicator = new("Frame", {
		Name = "TabIndicator",
		Size = UDim2.new(0, 3, 0, 24),
		Position = UDim2.new(0, 4, 0, 8), -- Starts at the first tab's position
		BackgroundColor3 = self._theme.Primary,
		BorderSizePixel = 0,
		ZIndex = 2,
		Parent = self._sidebar,
		Visible = false
	})
	new("UICorner", {CornerRadius = UDim.new(1, 0), Parent = self._tabIndicator})

	-- Content Area
	self._content = new("Frame", { Name = "Content", Size = UDim2.new(1, -170, 1, -40), Position = UDim2.new(0, 170, 0, 40), BackgroundTransparency = 1, BorderSizePixel = 0, Parent = self._root })

	-- Window Drag Logic (unchanged, it's already good)
	do
		local dragging, dragStart, startPos
		titlebar.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging, dragStart, startPos = true, input.Position, self._root.Position
			end
		end)
		titlebar.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
				local delta = input.Position - dragStart
				self._root.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			end
		end)
	end
	
	-- Initial theme application
	self:_applyTheme()

	return self
end

--[[
IMPROVEMENT: Efficient Theming
- Instead of using GetDescendants(), we register elements that need theming.
- This is far more performant and easier to manage.
]]
function FrostUI:_applyTheme()
	local theme = self._theme
	self._root.BackgroundColor3 = theme.Window
	self._sidebar.BackgroundColor3 = theme.Accent
	self._titleLabel.TextColor3 = theme.Text
	self._tabIndicator.BackgroundColor3 = theme.Primary
	
	for _, item in ipairs(self._themedElements) do
		item.obj[item.prop] = type(item.value) == "function" and item.value(theme) or theme[item.value]
	end
end

function FrostUI:AddTab(name)
	local theme = self._theme

	-- Tab Button in Sidebar
	local tabButton = new("TextButton", {
		Name = name .. "Button",
		Size = UDim2.new(1, -16, 0, 32),
		Position = UDim2.new(0.5, 0, 0, 0),
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundTransparency = 1,
		Font = Config.Fonts.Default,
		Text = "  " .. name,
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = self._sidebar
	})
	table.insert(self._themedElements, { obj = tabButton, prop = "TextColor3", value = "Text" })

	-- Content Frame for the Tab
	local tabFrame = new("ScrollingFrame", {
		Name = name .. "Content",
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		ScrollBarThickness = 6,
		CanvasSize = UDim2.new(),
		Visible = false,
		Parent = self._content
	})
	local list = new("UIListLayout", {
		Parent = tabFrame,
		Padding = Config.Padding.Window,
		SortOrder = Enum.SortOrder.LayoutOrder,
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
	})

	local tabObj = {
		name = name,
		button = tabButton,
		frame = tabFrame,
		list = list,
		_sections = {}
	}
	self._tabs[name] = tabObj

	tabButton.MouseButton1Click:Connect(function()
		self:SetActiveTab(name)
	end)

	-- Auto-select the first tab
	if not self._activeTab then
		self:SetActiveTab(name)
		self._tabIndicator.Visible = true
	end
	
	-- Return an API for this specific tab
	local tabAPI = {}
	function tabAPI:AddSection(titleText)
		return self:_createSection(tabObj, titleText)
	end
	
	return tabAPI
end

function FrostUI:SetActiveTab(name)
	if self._activeTab == name or not self._tabs[name] then return end

	local oldTab = self._tabs[self._activeTab]
	if oldTab then
		oldTab.frame.Visible = false
		oldTab.button.Font = Config.Fonts.Default
	end

	local newTab = self._tabs[name]
	newTab.frame.Visible = true
	newTab.button.Font = Config.Fonts.Bold
	self._activeTab = name

	-- Animate tab indicator
	local goalPos = UDim2.new(0, 4, 0, newTab.button.AbsolutePosition.Y - self._sidebar.AbsolutePosition.Y)
	TweenService:Create(self._tabIndicator, TweenInfo.new(Config.Durations.TabChange, Enum.EasingStyle.Quint), { Position = goalPos }):Play()
end


--[[
IMPROVEMENT: Component-Based and Automated Layout
- Sections and their components are created by dedicated functions.
- `_updateSectionHeight` automatically resizes sections and the scroll area, removing the need for manual `updateSize()` calls.
]]
function FrostUI:_createSection(parentTab, titleText)
	local theme = self._theme
	local sectionFrame = new("Frame", {
		Name = titleText:gsub("%s+", "") .. "Section",
		Size = UDim2.new(1, -24, 0, 100), -- Initial height, will auto-adjust
		BackgroundTransparency = 1,
		BorderSizePixel = 1,
		Parent = parentTab.frame,
	})
	new("UICorner", { CornerRadius = Config.Radii.Section, Parent = sectionFrame })
	table.insert(self._themedElements, {obj = sectionFrame, prop = "BackgroundColor3", value = "Accent"})
	table.insert(self._themedElements, {obj = sectionFrame, prop = "BorderColor3", value = "Border"})

	local title = new("TextLabel", { Name = "SectionTitle", Size = UDim2.new(1, -24, 0, 30), Position = UDim2.new(0, 12, 0, 0), Font = Config.Fonts.Bold, Text = titleText, TextSize = 15, TextColor3 = theme.Text, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = sectionFrame })
	table.insert(self._themedElements, {obj = title, prop = "TextColor3", value = "Text"})

	local contentHolder = new("Frame", { Name = "SectionContent", Size = UDim2.new(1, -24, 1, -38), Position = UDim2.new(0, 12, 0, 30), BackgroundTransparency = 1, Parent = sectionFrame })
	local contentLayout = new("UIListLayout", { Parent = contentHolder, Padding = Config.Padding.Section, SortOrder = Enum.SortOrder.LayoutOrder })
	
	local function updateSectionHeight()
		RunService.Heartbeat:Wait() -- Wait a frame for layout to compute
		local contentHeight = contentLayout.AbsoluteContentSize.Y
		sectionFrame.Size = UDim2.new(1, -24, 0, contentHeight + 38)
		parentTab.frame.CanvasSize = UDim2.new(0, 0, 0, parentTab.list.AbsoluteContentSize.Y)
	end

	-- Automate resizing
	contentHolder.ChildAdded:Connect(updateSectionHeight)
	contentHolder.ChildRemoved:Connect(updateSectionHeight)

	-- Section API
	local sectionAPI = {}
	function sectionAPI:AddButton(text, onClick)
		local btn = new("TextButton", { Name = "Button", Size = UDim2.new(1, 0, 0, 32), BackgroundColor3 = theme.Primary, BorderSizePixel = 0, Font = Config.Fonts.Default, Text = text or "Button", TextSize = 14, TextColor3 = Color3.fromRGB(255, 255, 255), Parent = contentHolder })
		new("UICorner", { CornerRadius = Config.Radii.Button, Parent = btn })
		btn.MouseButton1Click:Connect(function() pcall(onClick) end)
		addHoverEffect(btn, theme.Primary, theme.Primary:Lerp(Color3.new(1,1,1), 0.2))
		table.insert(self._themedElements, {obj = btn, prop = "BackgroundColor3", value = "Primary"})
		return btn
	end
	
	function sectionAPI:AddToggle(text, default, callback)
		local state = default or false
		local frame = new("Frame", { Name = "ToggleRow", Size = UDim2.new(1, 0, 0, 26), BackgroundTransparency = 1, Parent = contentHolder })
		local lbl = new("TextLabel", { Name = "TLabel", Size = UDim2.new(1, -60, 1, 0), Font = Config.Fonts.Default, Text = text or "Toggle", TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = frame })
		local toggleBg = new("TextButton", { Name = "Toggle", Size = UDim2.new(0, 44, 0, 24), Position = UDim2.new(1, -44, 0.5, -12), BorderSizePixel = 0, Text = "", Parent = frame })
		new("UICorner", { CornerRadius = UDim.new(0, 12), Parent = toggleBg })
		local knob = new("Frame", { Name = "Knob", Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(0, 3, 0.5, -9), BackgroundColor3 = Color3.new(1, 1, 1), BorderSizePixel = 0, Parent = toggleBg })
		new("UICorner", { CornerRadius = UDim.new(0, 9), Parent = knob })

		table.insert(self._themedElements, {obj = lbl, prop = "TextColor3", value = "Text"})
		
		local function setState(newState, silent)
			state = newState
			local knobPos = state and UDim2.new(1, -21, 0.5, -9) or UDim2.new(0, 3, 0.5, -9)
			local bgColor = state and theme.Primary or theme.Border
			
			TweenService:Create(knob, TweenInfo.new(Config.Durations.Toggle, Enum.EasingStyle.Quad), { Position = knobPos }):Play()
			TweenService:Create(toggleBg, TweenInfo.new(Config.Durations.Toggle), { BackgroundColor3 = bgColor }):Play()
			
			if not silent and callback then pcall(callback, state) end
		end

		toggleBg.MouseButton1Click:Connect(function() setState(not state) end)
		setState(state, true) -- Set initial state without firing callback
		return { Get = function() return state end, Set = setState }
	end
	
	-- Other components would follow a similar refactored pattern...
	
	updateSectionHeight() -- Initial size calculation
	return sectionAPI
end

return setmetatable(FrostUI, {
	__call = function(_, ...) return FrostUI:CreateWindow(...) end
})
