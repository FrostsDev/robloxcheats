-- FrostUI.lua - Refactored for the new "Amorestar" design
-- Single-file, executor-friendly custom UI lib

local FrostUI = {}
FrostUI.__index = FrostUI

-- Services
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Centralized Configuration
local Config = {
	Fonts = {
		Default = Enum.Font.Gotham,
		Bold = Enum.Font.GothamBold,
		Code = Enum.Font.Code,
	},
	Icons = {
		-- Using Unicode characters as placeholders. For best results, replace with ImageLabels and rbxassetids.
		Trophy = "üèÜ",
		Minimize = "‚Äî",
		Maximize = "üóñ",
		Close = "‚úï",
		TabMain = "‚óÜ", -- Placeholder icon
		TabPlayer = "‚òÖ", -- Placeholder icon
		Copy = "‚ùê",
		Toggle = "üëÜ"
	},
	Themes = {
		Dark = {
			Window = Color3.fromRGB(36, 36, 41),
			Accent = Color3.fromRGB(28, 28, 32),   -- Sidebar
			Section = Color3.fromRGB(44, 44, 50),  -- Codeblock/control backgrounds
			Text = Color3.fromRGB(230, 230, 230),
			Muted = Color3.fromRGB(160, 160, 165),
			Primary = Color3.fromRGB(0, 122, 255), -- Blue for highlights
			CodeSyntax = {
				Default = Color3.fromRGB(220, 220, 220),
				Keyword = Color3.fromRGB(255, 90, 140), -- 'or', 'and'
				Number = Color3.fromRGB(100, 220, 255), -- '06/08/2025'
			}
		},
		-- Light theme can be configured here similarly
	}
}

-- Utility function for creating instances
local function new(class, props)
	local inst = Instance.new(class)
	for k, v in pairs(props or {}) do
		inst[k] = v
	end
	return inst
end

-- The main window creation function
function FrostUI:CreateWindow(title, opts)
	opts = opts or {}
	local self = setmetatable({}, FrostUI)

	-- State
	self._tabs = {}
	self._activeTab = nil
	self._theme = Config.Themes[opts.Theme or "Dark"]

	-- Create base GUI
	self._screen = new("ScreenGui", {IgnoreGuiInset = true, ResetOnSpawn = false, ZIndexBehavior = Enum.ZIndexBehavior.Sibling, Parent = LocalPlayer:WaitForChild("PlayerGui")})
	self._root = new("Frame", {
		Name = "FrostWindow",
		Size = UDim2.new(0, 780, 0, 480),
		Position = UDim2.new(0.5, -390, 0.5, -240),
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = self._theme.Window,
		BorderSizePixel = 0,
		Parent = self._screen,
	})
	new("UICorner", {CornerRadius = UDim.new(0, 12), Parent = self._root})
	new("ImageLabel", { Name = "Shadow", BackgroundTransparency = 1, Size = UDim2.new(1, 24, 1, 24), Position = UDim2.new(0, -12, 0, -12), Image = "rbxassetid://1316045217", ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(10,10,118,118), ImageColor3 = Color3.fromRGB(0,0,0), ImageTransparency = 0.8, Parent = self._root, ZIndex = -1 })

	-- Title Bar
	local titlebar = new("Frame", { Name = "Titlebar", Size = UDim2.new(1, 0, 0, 50), BackgroundTransparency = 1, Parent = self._root })
	
	new("TextLabel", { Name = "TitleIcon", Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(0, 15, 0.5, -15), BackgroundTransparency = 1, Text = Config.Icons.Trophy, Font = Config.Fonts.Bold, TextSize = 20, TextColor3 = self._theme.Text, Parent = titlebar })
	new("TextLabel", { Name = "TitleLabel", Size = UDim2.new(0, 450, 0, 22), Position = UDim2.new(0, 45, 0, 5), BackgroundTransparency = 1, Text = title or "Frost UI", TextXAlignment = Enum.TextXAlignment.Left, Font = Config.Fonts.Bold, TextSize = 16, TextColor3 = self._theme.Text, Parent = titlebar })
	new("TextLabel", { Name = "SubtitleLabel", Size = UDim2.new(0, 450, 0, 20), Position = UDim2.new(0, 45, 0, 25), BackgroundTransparency = 1, Text = "Powered by amorestar", TextXAlignment = Enum.TextXAlignment.Left, Font = Config.Fonts.Default, TextSize = 12, TextColor3 = self._theme.Muted, Parent = titlebar })

	-- Window Controls
	local controls = new("Frame", { Name = "Controls", Size = UDim2.new(0, 120, 1, 0), Position = UDim2.new(1, -120, 0, 0), BackgroundTransparency = 1, Parent = titlebar })
	local closeBtn = new("TextButton", { Name = "Close", Size = UDim2.new(0, 32, 0, 32), Position = UDim2.new(1, -32, 0.5, -16), BackgroundTransparency = 1, Font = Config.Fonts.Default, Text = Config.Icons.Close, TextSize = 16, TextColor3 = self._theme.Muted, Parent = controls })
	local maxBtn = new("TextButton", { Name = "Maximize", Size = UDim2.new(0, 32, 0, 32), Position = UDim2.new(1, -64, 0.5, -16), BackgroundTransparency = 1, Font = Config.Fonts.Default, Text = Config.Icons.Maximize, TextSize = 16, TextColor3 = self._theme.Muted, Parent = controls })
	local minBtn = new("TextButton", { Name = "Minimize", Size = UDim2.new(0, 32, 0, 32), Position = UDim2.new(1, -96, 0.5, -16), BackgroundTransparency = 1, Font = Config.Fonts.Default, Text = Config.Icons.Minimize, TextSize = 16, TextColor3 = self._theme.Muted, Parent = controls })

	-- Sidebar
	self._sidebar = new("Frame", { Name = "Sidebar", Size = UDim2.new(0, 170, 1, -50), Position = UDim2.new(0, 0, 0, 50), BackgroundColor3 = self._theme.Accent, BorderSizePixel = 0, Parent = self._root })
	new("UIListLayout", { Parent = self._sidebar, Padding = UDim.new(0, 8), SortOrder = Enum.SortOrder.LayoutOrder, HorizontalAlignment = Enum.HorizontalAlignment.Center })

	-- Content Area
	self._content = new("Frame", { Name = "Content", Size = UDim2.new(1, -170, 1, -50), Position = UDim2.new(0, 170, 0, 50), BackgroundTransparency = 1, BorderSizePixel = 0, Parent = self._root })

	-- Window Drag Logic
	titlebar.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then local dragStart, startPos = input.Position, self._root.Position; local conn; conn = UserInputService.InputChanged:Connect(function(i) if i.UserInputType == Enum.UserInputType.MouseMovement then self._root.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + (i.Position.X - dragStart.X), startPos.Y.Scale, startPos.Y.Offset + (i.Position.Y - dragStart.Y)) end end); local conn2; conn2 = titlebar.InputEnded:Connect(function(i) if i.UserInputType == Enum.UserInputType.MouseButton1 then conn:Disconnect() conn2:Disconnect() end end) end end)
	closeBtn.MouseButton1Click:Connect(function() self._screen:Destroy() end)
	
	return self
end

function FrostUI:AddTab(name, icon)
	local tabButton = new("TextButton", { Name = name .. "Button", Size = UDim2.new(1, -24, 0, 40), BackgroundTransparency = 1, Font = Config.Fonts.Default, Text = "  " .. name, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = self._theme.Muted, Parent = self._sidebar })
	local tabIcon = new("TextLabel", { Name = "Icon", Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(0, 15, 0.5, -10), BackgroundTransparency = 1, Font = Config.Fonts.Bold, Text = icon or "", TextSize = 18, TextColor3 = self._theme.Muted, Parent = tabButton })

	local tabFrame = new("ScrollingFrame", { Name = name .. "Content", Size = UDim2.fromScale(1, 1), BackgroundTransparency = 1, BorderSizePixel = 0, ScrollingDirection = Enum.ScrollingDirection.Y, ScrollBarThickness = 4, CanvasSize = UDim2.new(), Visible = false, Parent = self._content })
	local list = new("UIListLayout", { Parent = tabFrame, Padding = UDim.new(0, 16), SortOrder = Enum.SortOrder.LayoutOrder, HorizontalAlignment = Enum.HorizontalAlignment.Center, })

	local tabObj = { name = name, button = tabButton, icon = tabIcon, frame = tabFrame, list = list }
	self._tabs[name] = tabObj
	
	tabButton.MouseButton1Click:Connect(function() self:SetActiveTab(name) end)

	if not self._activeTab then self:SetActiveTab(name) end
	
	local tabAPI = {}
	function tabAPI:AddSection(titleText) return self:_createSection(tabObj, titleText) end
	return tabAPI
end

function FrostUI:SetActiveTab(name)
	if self._activeTab == name or not self._tabs[name] then return end

	if self._activeTab and self._tabs[self._activeTab] then
		local oldTab = self._tabs[self._activeTab]
		oldTab.frame.Visible = false
		oldTab.button.TextColor3 = self._theme.Muted
		oldTab.icon.TextColor3 = self._theme.Muted
	end

	local newTab = self._tabs[name]
	newTab.frame.Visible = true
	newTab.button.TextColor3 = self._theme.Text
	newTab.icon.TextColor3 = self._theme.Text
	self._activeTab = name
end

function FrostUI:_createSection(parentTab, titleText)
	-- A section is now just a title and a content holder with a layout
	local contentHolder = new("Frame", { Name = titleText .. "Content", AutomaticSize = Enum.AutomaticSize.Y, Size = UDim2.new(1, -24, 0, 0), BackgroundTransparency = 1, Parent = parentTab.frame })
	local contentLayout = new("UIListLayout", { Parent = contentHolder, Padding = UDim.new(0, 8), SortOrder = Enum.SortOrder.LayoutOrder })
	local title = new("TextLabel", { Name = "SectionTitle", Size = UDim2.new(1, 0, 0, 30), BackgroundTransparency = 1, Font = Config.Fonts.Bold, Text = titleText, TextSize = 16, TextColor3 = self._theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = contentHolder, LayoutOrder = 0 })
	
	-- Function to update the scrolling canvas size
	local function updateCanvas()
		RunService.Heartbeat:Wait()
		parentTab.frame.CanvasSize = UDim2.new(0, 0, 0, parentTab.list.AbsoluteContentSize.Y)
	end
	contentHolder.ChildAdded:Connect(updateCanvas)
	contentHolder.ChildRemoved:Connect(updateCanvas)
	
	-- Section API
	local sectionAPI = {}
	
	function sectionAPI:AddCodeBlock(blockTitle, text)
		local frame = new("Frame", { Name = "CodeBlock", Size = UDim2.new(1, 0, 0, 200), BackgroundColor3 = self._theme.Section, Parent = contentHolder })
		new("UICorner", { CornerRadius = UDim.new(0, 8), Parent = frame })
		local listLayout = new("UIListLayout", { Parent = frame, Padding = UDim.new(0, 0) })
		
		-- Header
		local header = new("Frame", { Name = "Header", Size = UDim2.new(1, 0, 0, 32), BackgroundTransparency = 1, Parent = frame })
		local dots = new("Frame", { Name = "Dots", Size = UDim2.new(0, 80, 1, 0), Position = UDim2.new(0, 10, 0, 0), BackgroundTransparency = 1, Parent = header })
		local dotLayout = new("UIListLayout", { Parent = dots, FillDirection = Enum.FillDirection.Horizontal, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 6) })
		new("Frame", { BackgroundColor3 = Color3.fromRGB(255, 95, 87), Size = UDim2.new(0, 12, 0, 12), Parent = dots, BorderSizePixel = 0, ["Name"] = "Red"   , ZIndex = 2, children = {new("UICorner", {CornerRadius = UDim.new(1,0)})} })
		new("Frame", { BackgroundColor3 = Color3.fromRGB(254, 189, 47), Size = UDim2.new(0, 12, 0, 12), Parent = dots, BorderSizePixel = 0, ["Name"] = "Yellow", ZIndex = 2, children = {new("UICorner", {CornerRadius = UDim.new(1,0)})} })
		new("Frame", { BackgroundColor3 = Color3.fromRGB(42, 201, 63), Size = UDim2.new(0, 12, 0, 12), Parent = dots, BorderSizePixel = 0, ["Name"] = "Green" , ZIndex = 2, children = {new("UICorner", {CornerRadius = UDim.new(1,0)})} })
		new("TextLabel", { Name = "Title", Size = UDim2.new(1, -160, 1, 0), Position = UDim2.new(0.5, -0.5*(1-160/frame.AbsoluteSize.X), 0.5, -16), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, Text = blockTitle, Font = Config.Fonts.Default, TextSize = 13, TextColor3 = self._theme.Text, Parent = header })
		local copyBtn = new("TextButton", { Name = "Copy", Size = UDim2.new(0, 80, 1, 0), Position = UDim2.new(1, -80, 0, 0), BackgroundTransparency = 1, Text = Config.Icons.Copy .. " Copy", Font = Config.Fonts.Default, TextSize = 13, TextColor3 = self._theme.Muted, Parent = header })
		new("Frame", {Name = "Divider", Size = UDim2.new(1, 0, 0, 1), BackgroundColor3 = self._theme.Window, BorderSizePixel=0, Parent = frame})

		-- Editor
		local editor = new("Frame", { Name = "Editor", Size = UDim2.new(1, 0, 1, -33), BackgroundTransparency = 1, Parent = frame })
		local lineNumbers = new("TextLabel", { Name = "LineNumbers", Size = UDim2.new(0, 30, 1, -16), Position = UDim2.new(0, 5, 0, 8), BackgroundTransparency = 1, Font = Config.Fonts.Code, Text = "1", TextSize = 14, TextColor3 = self._theme.Muted, TextYAlignment = Enum.TextYAlignment.Top, Parent = editor })
		local codeInput = new("TextBox", { Name = "CodeInput", Size = UDim2.new(1, -40, 1, -16), Position = UDim2.new(0, 35, 0, 8), BackgroundTransparency = 1, MultiLine = true, ClearTextOnFocus = false, Font = Config.Fonts.Code, Text = text or "", TextXAlignment = Enum.TextXAlignment.Left, TextYAlignment = Enum.TextYAlignment.Top, TextSize = 14, TextColor3 = self._theme.CodeSyntax.Default, Parent = editor })
		
		-- Line number logic
		local function updateLineNumbers()
			local lines = codeInput.Text:split("\n")
			local numStr = ""
			for i = 1, #lines do numStr = numStr .. tostring(i) .. "\n" end
			lineNumbers.Text = numStr
		end
		codeInput:GetPropertyChangedSignal("Text"):Connect(updateLineNumbers)
		updateLineNumbers() -- Initial update
		
		copyBtn.MouseButton1Click:Connect(function() print("Copy functionality not implemented in this environment.") end)
		return codeInput
	end
	
	function sectionAPI:AddToggle(labelText, subText, callback)
		local frame = new("Frame", { Name = "ToggleRow", Size = UDim2.new(1, 0, 0, 40), BackgroundColor3 = self._theme.Section, Parent = contentHolder })
		new("UICorner", { CornerRadius = UDim.new(0, 8), Parent = frame })
		local labelFrame = new("Frame", { Name = "Labels", Size = UDim2.new(1, -60, 1, 0), Position = UDim2.new(0, 12, 0, 0), BackgroundTransparency = 1, Parent = frame })
		new("UIListLayout", { Parent = labelFrame, Padding = UDim.new(0, -2), SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center })
		new("TextLabel", { Name = "Label", Size = UDim2.new(1, 0, 0, 20), BackgroundTransparency = 1, Text = labelText, Font = Config.Fonts.Bold, TextSize = 14, TextColor3 = self._theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = labelFrame })
		new("TextLabel", { Name = "SubLabel", Size = UDim2.new(1, 0, 0, 15), BackgroundTransparency = 1, Text = subText, Font = Config.Fonts.Default, TextSize = 12, TextColor3 = self._theme.Muted, TextXAlignment = Enum.TextXAlignment.Left, Parent = labelFrame })
		
		local btn = new("TextButton", { Name = "ToggleIcon", Size = UDim2.new(0, 40, 0, 40), Position = UDim2.new(1, -45, 0, 0), BackgroundTransparency = 1, Font = Config.Fonts.Default, Text = Config.Icons.Toggle, TextSize = 24, TextColor3 = self._theme.Muted, Parent = frame })
		btn.MouseButton1Click:Connect(function() pcall(callback) end) -- This is now just a button, state must be handled externally
		return btn
	end
	
	updateCanvas() -- Call initially
	return sectionAPI
end

-- Allow module call syntax
return setmetatable(FrostUI, {
	__call = function(_, ...) return FrostUI:CreateWindow(...) end
})
